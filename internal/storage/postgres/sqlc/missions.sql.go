// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: missions.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createMission = `-- name: CreateMission :one
INSERT INTO missions (
  state
) VALUES (
  $1
) RETURNING id
`

func (q *Queries) CreateMission(ctx context.Context, state string) (int64, error) {
	row := q.db.QueryRow(ctx, createMission, state)
	var id int64
	err := row.Scan(&id)
	return id, err
}

type CreateTargetsParams struct {
	ID        int64
	MissionID int64
	Name      string
	Country   string
	Notes     string
	State     string
}

const deleteMission = `-- name: DeleteMission :exec
DELETE
FROM missions
WHERE id = $1
`

func (q *Queries) DeleteMission(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteMission, id)
	return err
}

const deleteTarget = `-- name: DeleteTarget :exec
DELETE
FROM targets
WHERE id = $1
  AND mission_id = $2
`

type DeleteTargetParams struct {
	ID        int64
	MissionID int64
}

func (q *Queries) DeleteTarget(ctx context.Context, arg DeleteTargetParams) error {
	_, err := q.db.Exec(ctx, deleteTarget, arg.ID, arg.MissionID)
	return err
}

const findActiveMission = `-- name: FindActiveMission :many
SELECT missions.id as mission_id,
  missions.state as mission_state,
  missions.spy_cat_id,
  targets.id as target_id,
  targets.name,
  targets.country,
  targets.notes,
  targets.state as target_state
FROM missions
INNER JOIN targets ON missions.id = targets.mission_id
WHERE missions.spy_cat_id = $1
  AND missions.state = 'in_progress'
`

type FindActiveMissionRow struct {
	MissionID    int64
	MissionState string
	SpyCatID     pgtype.Int8
	TargetID     int64
	Name         string
	Country      string
	Notes        string
	TargetState  string
}

func (q *Queries) FindActiveMission(ctx context.Context, spyCatID pgtype.Int8) ([]FindActiveMissionRow, error) {
	rows, err := q.db.Query(ctx, findActiveMission, spyCatID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindActiveMissionRow
	for rows.Next() {
		var i FindActiveMissionRow
		if err := rows.Scan(
			&i.MissionID,
			&i.MissionState,
			&i.SpyCatID,
			&i.TargetID,
			&i.Name,
			&i.Country,
			&i.Notes,
			&i.TargetState,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllMissions = `-- name: FindAllMissions :many
SELECT missions.id as mission_id,
  missions.state as mission_state,
  missions.spy_cat_id,
  targets.id as target_id,
  targets.name,
  targets.country,
  targets.notes,
  targets.state as target_state
FROM missions
INNER JOIN targets ON missions.id = targets.mission_id
ORDER BY missions.id ASC
`

type FindAllMissionsRow struct {
	MissionID    int64
	MissionState string
	SpyCatID     pgtype.Int8
	TargetID     int64
	Name         string
	Country      string
	Notes        string
	TargetState  string
}

func (q *Queries) FindAllMissions(ctx context.Context) ([]FindAllMissionsRow, error) {
	rows, err := q.db.Query(ctx, findAllMissions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllMissionsRow
	for rows.Next() {
		var i FindAllMissionsRow
		if err := rows.Scan(
			&i.MissionID,
			&i.MissionState,
			&i.SpyCatID,
			&i.TargetID,
			&i.Name,
			&i.Country,
			&i.Notes,
			&i.TargetState,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findMissionById = `-- name: FindMissionById :many
SELECT missions.id as mission_id,
  missions.state as mission_state,
  missions.spy_cat_id,
  targets.id as target_id,
  targets.name,
  targets.country,
  targets.notes,
  targets.state as target_state
FROM missions
INNER JOIN targets ON missions.id = targets.mission_id
WHERE missions.id = $1
`

type FindMissionByIdRow struct {
	MissionID    int64
	MissionState string
	SpyCatID     pgtype.Int8
	TargetID     int64
	Name         string
	Country      string
	Notes        string
	TargetState  string
}

func (q *Queries) FindMissionById(ctx context.Context, id int64) ([]FindMissionByIdRow, error) {
	rows, err := q.db.Query(ctx, findMissionById, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindMissionByIdRow
	for rows.Next() {
		var i FindMissionByIdRow
		if err := rows.Scan(
			&i.MissionID,
			&i.MissionState,
			&i.SpyCatID,
			&i.TargetID,
			&i.Name,
			&i.Country,
			&i.Notes,
			&i.TargetState,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateMission = `-- name: UpdateMission :exec
UPDATE missions
SET state = $2,
  spy_cat_id = $3
WHERE id = $1
`

type UpdateMissionParams struct {
	ID       int64
	State    string
	SpyCatID pgtype.Int8
}

func (q *Queries) UpdateMission(ctx context.Context, arg UpdateMissionParams) error {
	_, err := q.db.Exec(ctx, updateMission, arg.ID, arg.State, arg.SpyCatID)
	return err
}

const updateTarget = `-- name: UpdateTarget :exec
UPDATE targets
SET notes = $3,
  state = $4
WHERE id = $1
  AND mission_id = $2
`

type UpdateTargetParams struct {
	ID        int64
	MissionID int64
	Notes     string
	State     string
}

func (q *Queries) UpdateTarget(ctx context.Context, arg UpdateTargetParams) error {
	_, err := q.db.Exec(ctx, updateTarget,
		arg.ID,
		arg.MissionID,
		arg.Notes,
		arg.State,
	)
	return err
}
