// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: agents.sql

package sqlc

import (
	"context"
)

const createAgent = `-- name: CreateAgent :one
INSERT INTO agents (
  name, password_hash
) VALUES (
  $1, $2
)
RETURNING id
`

type CreateAgentParams struct {
	Name         string
	PasswordHash []byte
}

func (q *Queries) CreateAgent(ctx context.Context, arg CreateAgentParams) (int64, error) {
	row := q.db.QueryRow(ctx, createAgent, arg.Name, arg.PasswordHash)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const findAgentById = `-- name: FindAgentById :one
SELECT id, name, password_hash
FROM agents
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindAgentById(ctx context.Context, id int64) (Agent, error) {
	row := q.db.QueryRow(ctx, findAgentById, id)
	var i Agent
	err := row.Scan(&i.ID, &i.Name, &i.PasswordHash)
	return i, err
}

const findAgentByName = `-- name: FindAgentByName :one
SELECT id, name, password_hash
FROM agents
WHERE name = $1
LIMIT 1
`

func (q *Queries) FindAgentByName(ctx context.Context, name string) (Agent, error) {
	row := q.db.QueryRow(ctx, findAgentByName, name)
	var i Agent
	err := row.Scan(&i.ID, &i.Name, &i.PasswordHash)
	return i, err
}
