// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: tokens.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens (
  hash,
  user_id,
  user_type,
  expiry,
  scope
) VALUES (
  $1, $2, $3, $4, $5
)
`

type CreateTokenParams struct {
	Hash     []byte
	UserID   int64
	UserType string
	Expiry   pgtype.Timestamptz
	Scope    string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.Exec(ctx, createToken,
		arg.Hash,
		arg.UserID,
		arg.UserType,
		arg.Expiry,
		arg.Scope,
	)
	return err
}

const findTokenByPlaintext = `-- name: FindTokenByPlaintext :one
SELECT hash, user_id, user_type, expiry, scope
FROM tokens
WHERE hash = $1
  AND scope = $2
  AND expiry >= $3
`

type FindTokenByPlaintextParams struct {
	Hash   []byte
	Scope  string
	Expiry pgtype.Timestamptz
}

func (q *Queries) FindTokenByPlaintext(ctx context.Context, arg FindTokenByPlaintextParams) (Token, error) {
	row := q.db.QueryRow(ctx, findTokenByPlaintext, arg.Hash, arg.Scope, arg.Expiry)
	var i Token
	err := row.Scan(
		&i.Hash,
		&i.UserID,
		&i.UserType,
		&i.Expiry,
		&i.Scope,
	)
	return i, err
}
