// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: spy_cats.sql

package sqlc

import (
	"context"
)

const createSpyCat = `-- name: CreateSpyCat :one
INSERT INTO spy_cats (
  name,
  password_hash,
  years_of_experience,
  breed,
  salary
) VALUES (
  $1, $2, $3, $4, $5
)
RETURNING id
`

type CreateSpyCatParams struct {
	Name              string
	PasswordHash      []byte
	YearsOfExperience int32
	Breed             string
	Salary            float64
}

func (q *Queries) CreateSpyCat(ctx context.Context, arg CreateSpyCatParams) (int64, error) {
	row := q.db.QueryRow(ctx, createSpyCat,
		arg.Name,
		arg.PasswordHash,
		arg.YearsOfExperience,
		arg.Breed,
		arg.Salary,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteSpyCatById = `-- name: DeleteSpyCatById :exec
DELETE
FROM spy_cats
WHERE id = $1
`

func (q *Queries) DeleteSpyCatById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteSpyCatById, id)
	return err
}

const findSpyCatById = `-- name: FindSpyCatById :one
SELECT id, name, password_hash, years_of_experience, breed, salary
FROM spy_cats
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindSpyCatById(ctx context.Context, id int64) (SpyCat, error) {
	row := q.db.QueryRow(ctx, findSpyCatById, id)
	var i SpyCat
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.YearsOfExperience,
		&i.Breed,
		&i.Salary,
	)
	return i, err
}

const findSpyCatByName = `-- name: FindSpyCatByName :one
SELECT id, name, password_hash, years_of_experience, breed, salary
FROM spy_cats
WHERE name = $1
LIMIT 1
`

func (q *Queries) FindSpyCatByName(ctx context.Context, name string) (SpyCat, error) {
	row := q.db.QueryRow(ctx, findSpyCatByName, name)
	var i SpyCat
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.PasswordHash,
		&i.YearsOfExperience,
		&i.Breed,
		&i.Salary,
	)
	return i, err
}

const listSpyCats = `-- name: ListSpyCats :many
SELECT id, name, password_hash, years_of_experience, breed, salary
FROM spy_cats
ORDER BY id ASC
`

func (q *Queries) ListSpyCats(ctx context.Context) ([]SpyCat, error) {
	rows, err := q.db.Query(ctx, listSpyCats)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SpyCat
	for rows.Next() {
		var i SpyCat
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.PasswordHash,
			&i.YearsOfExperience,
			&i.Breed,
			&i.Salary,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSpyCat = `-- name: UpdateSpyCat :exec
UPDATE spy_cats
SET salary = $2
WHERE id = $1
`

type UpdateSpyCatParams struct {
	ID     int64
	Salary float64
}

func (q *Queries) UpdateSpyCat(ctx context.Context, arg UpdateSpyCatParams) error {
	_, err := q.db.Exec(ctx, updateSpyCat, arg.ID, arg.Salary)
	return err
}
